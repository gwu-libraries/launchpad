import os
import sys

DEBUG = True

ADMINS = (
    # ('Your Name', 'your_email@example.com'),
)

MANAGERS = ADMINS

if 'test' in sys.argv:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': 'test',
        }
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': '',
            'NAME': '',
            'USER': '',
            'PASSWORD': '',
            'HOST': '',
            'PORT': '',
        }
    }


TEMPLATE_DIRS = (
    os.path.join(os.path.dirname(__file__), 'templates'),
)


LIB_LOOKUP = {
    'AL': 'Washington Law (American)',
    'AU': 'American',
    'CU': 'Catholic',
    'DA': 'Dahlgren Medical (Georgetown)',
    'DC': 'UDC',
    'E-GovDoc': 'WRLC',
    'E-Resources': 'WRLC',
    'GA': 'Gallaudet',
    'GM': 'George Mason',
    'GT': 'Georgetown',
    'GW': 'George Washington',
    # HD is Himmelfarb-Dahlgren items jointly held in storage
    'HD': 'Himmelfarb-Dahlgren',
    'HI': 'Himmelfarb Health Sciences (George Washington)',
    'HL': 'Howard Law',
    'HS': 'Howard Health Sciences',
    'HU': 'Howard',
    'JB': 'Jacob Burns Law (George Washington)',
    'LI': 'Catholic',
    'LL': 'George Mason Law Library',
    'MU': 'Marymount',
    'TR': 'Trinity',
    'WR': 'WRLC',
}


Z3950_SERVERS = {
    'LIBRARY_ID': {
        'SERVER_ADDRESS': '',
        'SERVER_PORT': '',
        'DATABASE_NAME': '',
        'PREFERRED_RECORD_SYNTAX': '',
    }
}

INDEX_CODES = {
    'isbn': ['020N', '020A', 'ISB3'],
    'issn': ['022A', '022Z'],
    'oclc': ['035A'],
    }


# Preferred library for bib record and top of the holdings list
# ex.: 'GW'
PREF_LIB = ''  

# Institution name, link, etc. to display in HTML header
INSTITUTION_NAME = 'GW Libraries'
INSTITUTION_LINK = 'http://library.gwu.edu/'
HOST_INSTITUTION_NAME = 'The George Washington University'
HOST_INSTITUTION_LINK = 'http://www.gwu.edu/'

# Libraries that should be put at the bottom of the holdings list
# Optional, can be empty or used for libraries with restricted access, etc.
BOTTOM_LIBS = [] 

# Eligibility Options

INELIGIBLE_LIBRARIES = ['JB', 'HL', 'HS', 'AL']

SHARED_LIBRARY_NAMES = ['WR', 'E-Resources', 'E-GovDoc',
    'Internet Archive', 'IA']

INELIGIBLE_PERM_LOCS = ['REFERENCE', 'REF', 'RESERVE', 'NON-CIRC', 
    'RESTRICTED', 'ONLY', 'IN LIBRARY', 'MICRO', 'ARCHIVES', 'KIEV', 'SPEC',
    'IBT', 'AUDIOTAPES', 'CD-ROM', 'DISCS', 'RECORDS', 'RUSH', 'VIDEOTAPES',
    'VIDEODISCS', 'MEDIA VIDEOS', 'DEAF DVD', 'DEAF VHS', 'IN PROCESS',
    'AU: LAW', 'QATAR', 'TURKEY', 'CAMPUS USE']

# Add electronic locations
INELIGIBLE_PERM_LOCS += ['SHARED', 'ONLINE', 'ELECTRONIC', 'INTERNET',
    'STREAMING', 'EREADER']

INELIGIBLE_TEMP_LOCS = ['RESERVE', 'BINDERY']

INELIGIBLE_STATUS = ['RENEWED', 'MISSING', 'LOST', 'OVERDUE', 'TRANSIT',
    'HOLD', 'DUE', 'CHARGED', 'UNAVAILABLE', 'WITHDRAWN', 'DAMAGED',
    'LIB USE ONLY', 'CHECKED OUT']
                     
SCREAMING_LOCATIONS = [
    # NOTE: 'LAU' must preceed 'AU'
    ('LAU', 'Lauinger'),
    ('AU', 'American'),
    ('FLOOR', 'floor'),
    ('GELMAN', 'Gelman'),
    ('GROUND', 'ground'),    
    ('LOWER LEVEL', 'lower level'),
    ('MARYMOUNT', 'Marymount'),    
    ('MT VERNON CAMPUS', 'Mt. Vernon campus'),
    ('SCIENCE', 'Science'),    
    ('Stacks', 'stacks'),
    ('UNBOUND', 'unbound'),
    ('VAN NESS', 'Van Ness'),
    ]

MAX_ITEMS = 6

ILLIAD_URL = 'http://www.aladin.wrlc.org/Z-WEB/ILLAuthClient?'

ILLIAD_SID = 'GWLP'

TITLE_CHARS = 255

TITLE_LEFTOVER_CHARS = 5

MARC_245_SUBFIELDS = ['$a', '$b', '$c', '$f', '$g', '$h', '$k', '$n',
    '$p', '$s', '$6', '$8']

STREAMING_AUDIO_TAGS = ['GW: Streaming Audio', 'GW Streaming Audio']

STREAMING_VIDEO_TAGS = ['GW: Streaming Video', 'GW Streaming Video']

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',
        'LOCATION': '127.0.0.1:11211',
        'TIMEOUT': 60 * 60,  # default to one hour
        }
    }

ITEM_PAGE_CACHE_SECONDS = 60 * 60 # one hour

# If this value is present (not empty), GA bug will be added to html
GOOGLE_ANALYTICS_UA = ''

# Link resolver information, only used in debug mode now
LINK_RESOLVER = {
    'base_url': 'http://findit.library.gwu.edu/go',
    'name': 'findit',
    }

API_LIST = [
    {'name': 'googlebooks',
     'url': 'https://www.googleapis.com/books/v1/volumes?q=%s:%s',
     'key': ''},
    {'name': 'worldcat',
     'url': 'http://www.worldcat.org/webservices/catalog/content/%s/%s?wskey=%s',
     'key': ''}
    ]

# Show humans.txt?
ENABLE_HUMANS = False

# Show sitemaps in robots.txt?
ENABLE_SITEMAPS = False

# Relative path of sitemap files on local disk
SITEMAPS_DIR = os.path.join(os.path.dirname(__file__), '../ui/static/sitemaps')

# Base public URL of links; used by sitemap generator, no trailing slash
SITEMAPS_BASE_URL = 'http://findit.library.gwu.edu'

SER_SOL_API_URL = 'http://uz4ug4lz9g.openurl.xml.serialssolutions.com/openurlxml?version=1.0'

SER_SOL_API_MAX_ATTEMPTS = 3

SER_SOL_DBID_TEXT = 'TN5'
